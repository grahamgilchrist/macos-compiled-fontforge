New in 0.97:

* Improved script support.  Besides Cyrillic and Greek, which are now
  handled separately from Latin, ttfautohint can handle Hebrew.

* Option `-f' now takes a parameter to specify the fallback script.  The
  corresponding long option name has been renamed from `--latin-fallback' to
  `--fallback-script'.

* Work around a bug in display environments that use FreeType 2.5.0 and
  earlier for rendering: Sometimes, the `strong' stem width routine was used
  for DW ClearType (this is, subpixel hinting in FreeType is enabled) even
  if `smooth' was selected while generating the font with ttfautohint.


New in 0.96:

* Option `--components' has been replaced with `--composites': By default,
  the components of a composite glyph are now hinted separately, since tests
  has shown that this gives good results in most cases.  If this option is
  set, however, the composite glyph itself gets hinted (and the hints of the
  components are ignored).

  An unfortunate side effect is that ttfautohint's option `-c' (which stays
  as a shorthand for `--composites') now does exactly the opposite as in
  previous releases.

* Older versions of Monotype's `iType' bytecode interpreter have a serious
  bug: The DIV instruction rounds the result, while the correct operation is
  truncation.  This caused `exploding characters' with fonts hinted by
  ttfautohint.  Since many printers contain this rasterizer without any
  possibility to update to a non-buggy version, ttfautohint now contains
  work-arounds to circumvent the problem.

* Better support for glyphs where some points have almost the same position
  (for example glyph `Oslash' in font `Roboto-Thin').

* Better support for glyphs which use explicit `on' points around round
  extrema.


New in 0.95:

* New option `--dehint' to strip off all hints without generating new hints.
  This option is intended for testing purposes.

* Minor fixes to the created bytecode for compatibility.

* Minor GUI improvements.


New in 0.94:

* New option `--windows-compatibility' which adds two artificial blue zones
  at vertical positions given by `usWinAscent' and `usWinDescent'.  This
  helps ttfautohint's hinting algorithm reduce the possibility of clipping
  if those two values are very tight.

* Implement option `--x-height-snapping-exceptions', making ttfautohint
  avoid x-height snapping for selected PPEM values.  Useful in combination
  with `--windows-compatibility'.

* Minor fixes to the created bytecode for compatibility and robustness.


New in 0.93:

* New option `--components' to treat components of composite glyphs
  separately.  This greatly reduces the bytecode size.

  I'm waiting for reports whether this option works for most fonts; in case
  this is true I'm inverting the option, making it the default (and the old
  behaviour optional).

* Full support of TTCs, this is, all subfonts get auto-hinted now.

* The upper limit of the `--increase-x-height' option has been removed.

* Drag-and-drop support in the GUI.

* The TTY version of ttfautohint now acts like a (Unix) filter, this is, it
  accepts stdin and stdout as input and output, respectively.

* Less memory consumption.


New in 0.92:

* A serious bug in the created bytecode has been fixed, causing incorrect
  rounding.


New in 0.91:

* A new, `strong' routine to handle stem widths and positions has been
  added, to be selected with the `--strong-stem-width' command line option.
  If it is active, stem widths and positions are snapped to the grid as much
  as possible.  This algorithm is useful for GDI ClearType support.

* A new command line option `--debug' (not available for ttfautohintGUI) to
  print very detailed debugging information.


New in 0.9:

* The created bytecode has been reduced in size, making it approx. 20%
  smaller.

* New option `--symbol' to use standard stem height and width values instead
  of using character `o' (which may be missing).  Use this option for symbol
  fonts or math glyphs.

* More documentation (in text, HTML, and PDF format).  It's still
  incomplete, though.

* Option `--ignore-permissions' has been renamed to `--ignore-restrictions'.
  The short form is still `-i'.

* Defaults for various parameters have been set to more sensible values:

    hinting-range-max: 50 (was 1000)
    hinting-limit: 200 (was 1000)

* Option `--increase-x-height' now has a mandatory argument (in the range
  6-20 or value 0 to disable it, default value is 14).


New in 0.8:

* Implement option `-x' to increase the x height of the font for small PPEM
  values by rounding up far more often then rounding down.

* Add option `-G N' to switch off hinting completely above value N.

* ttfautohint now appends version information and the used parameters to the
  `Version' field(s) in the `name' table.  This can be suppressed with
  option `-n'.


New in 0.7:

* A GUI has been added, using the Qt framework.  The binary is called
  `ttfautohintGUI'.


New in 0.6.1:

* The improved handling of composite glyphs in 0.6 was buggy under certain
  circumstances, making ttfautohint crash and FontValidator complain.

* Dropout handling has been activated.


New in 0.6:

* Improved handling of composite glyphs.

* Implement option `-p' to pre-hint glyphs with original hints before
  conversion takes place.

* Don't add a DSIG table if there is none in the input font.

* Human-readable error messages instead of hexadecimal error codes.

* Better tests (both at runtime and compile time) to reject too old FreeType
  versions.


New in 0.5:

* Rendering on iOS is now expected to give good results.

* No bad rendering at very large PPEM values.


New in 0.4:

* The bytecode has been changed to `create' twilight points.  This should
  avoid rendering artifacts on some platforms.


New in 0.3:

* Fix font generation; sometimes the `glyf' table was one byte too short,
  making the font invalid.


New in 0.2:

* Fix bytecode bugs which prevented correct rendering on some platforms.


New in 0.1:

* First release.

EOF
